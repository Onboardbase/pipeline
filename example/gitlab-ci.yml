build_and_deploy:
    stage: github_workflow
    parallel: 5
    allow_failure: true
    after_script:
        - some commands to run overriding the global after script
    before_script:
        - echo "Execute this command before any 'script:' commands."
    scripts:
        - script_a
        - script_b
        - script_c
    artifacts:
        paths:
            - binaries/
            - .config
        exclude:
            - binaries/**/*.o
        expire_in: 1 week
        expose_as: artifact_1
        name: artifact_name
        reports:
            junit: rspec.xml
        when: on_failure
    cache:
        key:
            files:
                - Gemfile.lock
            prefix: $CI_JOB_NAME
        untracked: true
        when: always
        policy: pull
        paths:
            - binaries/*.apk
            - .config
        fallback_keys:
            - gems
    coverage: '/Code coverage: \d+\.\d+/'
    script: make test:linux
    environment:
        name: production
        url: https://prod.example.com
        action: stop
        auto_stop_in: 1 day
        kubernetes:
            namespace: production
        deployment_tier: production
        extends: .test
    hooks:
        pre_get_sources_script:
            - echo 'hello job1 pre_get_sources_script'
    id_tokens:
        ID_TOKEN_1:
            aud:
                - https://gitlab.com
        ID_TOKEN_2:
            aud:
                - https://gcp.com
                - https://aws.com
    image:
        name: registry.example.com/my/image:latest
        entrypoint:
            - ""
        pull_policy:
            - always
            - if-not-present
    inherit: {}
    interruptible: true
    release:
        tag_name: $CI_COMMIT_TAG
        name: Release $CI_COMMIT_TAG
        description: Release created using the release-cli.
        tag_message: Annotated tag message
        released_at: "2021-03-15T08:00:00Z"
        ref: $CI_COMMIT_BRANCH
        assets:
            links:
                - name: asset1
                  url: https://example.com/assets/1
                - name: asset2
                  url: https://example.com/assets/2
                  filepath: /pretty/url/1
                  link_type: other
    resource_group: production
    needs:
        - pipeline: other/project
        - job: build_job2
        - job: build-1
          ref: main
          artifacts: true
        - job: build-2
          ref: main
          artifacts: true
          optional: true
    rules:
        - allow_failure: true
        - exists:
            - Dockerfile
        - allow_failure: true
          if: $CI_PIPELINE_SOURCE == "merge_request_event"
          needs:
            - build-dev
          changes:
            paths:
                - Dockerfile
            compare_to: refs/heads/branch1
          when: manual
    secrets:
        DATABASE_PASSWORD:
            token: $VAULT_TOKEN
            vault:
                engine:
                    name: kv-v2
                    path: ops
                path: production/db
                field: password
    tags:
        - ruby
        - postgres
    timeout: 3h 30m
    trigger:
        include: path/to/child-pipeline.gitlab-ci.yml
        project: my-group/my-project
        branch: development
        strategy: depend
        forward: {}
    when: manual
    variables:
        DEPLOY_ENVIRONMENT:
            options:
                - production
                - staging
                - canary
            value: staging
            description: The deployment target. Change this variable to 'canary' or 'production' if needed.
        REVIEW_PATH:
            value: /review
    services:
        - name: my-postgres:11.7
          pull_policy:
            - always
            - if-not-present
          entrypoint:
            - /usr/local/bin/db-postgres
          command:
            - start
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - always
            - unknown_failure
            - script_failure
            - api_failure
            - stuck_or_timeout_failure
            - runner_system_failure
            - runner_unsupported
            - stale_schedule
            - job_execution_timeout
            - archived_failure
            - unmet_prerequisites
            - scheduler_failure
            - data_integrity_failure
default:
    before_script:
        - echo Hello World
        - echo Goodbye World
    after_script:
        - echo Hello World
        - echo Goodbye World
    artifacts:
        paths:
            - binaries
            - names
    cache:
        key: unique id for the cache
        paths:
            - binaries/*.apk
            - .config
    hooks:
        name_of_the_hook:
            - scripts to run for the hook
    image: ruby:3.0
    interruptible: true
    retry: 2
    services:
        - name: my-postgres:11.7
          alias: db-postgres
          entrypoint:
            - /usr/local/bin/db-postgres
          command:
            - start
    tags:
        - ruby
        - postgres
    timeout: 3h 30m
includes:
    - project: my-group/my-project
      file: /templates/.gitlab-ci-template.yml
    - project: my-group/my-subgroup/my-project-2
      file:
        - /templates/.builds.yml
        - /templates/.tests.yml
    - project: my-group/my-project
      ref: main
      file: /templates/.gitlab-ci-template.yml
    - project: my-group/my-project
      ref: v1.0.0
      file: /templates/.gitlab-ci-template.yml
    - project: my-group/my-project
      ref: 787123b47f14b552955ca2786bc9542ae66fee5b
      file: /templates/.gitlab-ci-template.yml
stages:
    - github_workflow
workflow:
    name: This is the name of the pipeline config
    rules:
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
          variables:
            DEPLOY_VARIABLE: deploy-production
        - if: $CI_COMMIT_REF_NAME =~ /feature/
          variables:
            IS_A_FEATURE: "true"
        - when: always
